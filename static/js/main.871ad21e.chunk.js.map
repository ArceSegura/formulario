{"version":3,"sources":["components/Header.js","context/CamposContext.js","context/FormularioContext.js","components/ListaCampos.js","components/InputText.js","components/InputSelect.js","components/Formulario.js","App.js","reportWebVitals.js","index.js"],"names":["Header","CamposContext","createContext","CamposProvider","props","useState","campos","guardarCampos","useEffect","obtenerCampos","a","id","nombre","Provider","value","children","FormularioContext","FormularioProvider","formulario","guardarFormulario","guardarCampoContext","campo","ListaCampos","name","label","tipo","cantidad","opciones","camposGenerados","guardarCamposGenerado","useContext","e","target","opcionesArr","obtenerOpciones","className","onSubmit","preventDefault","uuidv4","onChange","map","type","placeholder","index","push","listarOpciones","InputText","config","InputSelect","opcion","key","Formulario","item","tipoInput","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.871ad21e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n    return ( \r\n        <header >\r\n            <h1>Constructor de formularios</h1>\r\n        </header>\r\n     );\r\n}\r\n \r\nexport default Header;","import React, { createContext, useState, useEffect } from 'react';\r\n\r\n// Crear el Context\r\nexport const CamposContext = createContext();\r\n\r\n// Provider es donde se encuentran las funciones y state\r\nconst CamposProvider = (props) => {\r\n\r\n    // crear el state del Context\r\n    const [campos, guardarCampos] = useState([]);\r\n\r\n    // ejecutar el llamado a la api\r\n    useEffect(() => {\r\n        const obtenerCampos = async () => {\r\n            //Simular respuesta api\r\n            let campos = [\r\n                {\r\n                    id: 1,\r\n                    nombre: 'text'\r\n                },\r\n                {\r\n                    id: 2,\r\n                    nombre: 'select'\r\n                },\r\n            ]\r\n\r\n            guardarCampos(campos);\r\n        }\r\n        obtenerCampos();\r\n    }, []);\r\n\r\n    return (\r\n        <CamposContext.Provider\r\n            value={{\r\n                campos\r\n            }}\r\n        >\r\n            {props.children}\r\n        </CamposContext.Provider>\r\n    )\r\n}\r\nexport default CamposProvider;","import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const FormularioContext = createContext();\r\n\r\nconst FormularioProvider = (props) => {\r\n\r\n    const [formulario, guardarFormulario] = useState([]);\r\n\r\n    const guardarCampoContext = (campo)=>{\r\n        guardarFormulario([\r\n            ...formulario,\r\n            campo\r\n        ])\r\n    }\r\n\r\n    return ( \r\n        <FormularioContext.Provider\r\n            value={{\r\n                formulario,\r\n                guardarCampoContext,\r\n            }}\r\n        >\r\n            {props.children}\r\n        </FormularioContext.Provider>\r\n     );\r\n}\r\n \r\nexport default FormularioProvider;","import React, { useContext, useState } from 'react';\r\nimport { CamposContext } from '../context/CamposContext';\r\nimport { FormularioContext } from '../context/FormularioContext';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst ListaCampos = () => {\r\n    const [camposGenerados, guardarCamposGenerado] = useState({\r\n        name: '',\r\n        label: '',\r\n        tipo: '',\r\n        cantidad: 0,\r\n        opciones: []\r\n    })\r\n\r\n    const { campos } = useContext(CamposContext);\r\n    const { guardarCampoContext } = useContext(FormularioContext);\r\n\r\n    const obtenerCampos = e => {\r\n        guardarCamposGenerado({\r\n            ...camposGenerados,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    const generarUUID = ()=>{\r\n        guardarCamposGenerado({\r\n            ...camposGenerados,\r\n            name: uuidv4()\r\n        })\r\n    }\r\n    let opcionesArr = []\r\n    const obtenerOpciones = (e)=>{\r\n        let name = e.target.name;\r\n        \r\n        opcionesArr[name] = e.target.value;\r\n\r\n        guardarCamposGenerado({\r\n            ...camposGenerados,\r\n            [\"opciones\"] : opcionesArr\r\n        })\r\n    }\r\n\r\n    const listarOpciones = ()=>{\r\n        let opciones = [];\r\n        for (let index = 0; index < camposGenerados.cantidad; index++) {\r\n            opciones.push(\r\n                <div className=\"col-md-4 mt-2\" key={opciones + index}>\r\n                    <input\r\n                    name={index}\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    placeholder={`Opción ${index +1}`}\r\n                    onChange={obtenerOpciones}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return opciones\r\n    }\r\n\r\n\r\n    return ( \r\n        <form\r\n            className=\"col-12\"\r\n            onSubmit={ e => {\r\n                e.preventDefault();\r\n                generarUUID();\r\n                guardarCampoContext(camposGenerados);\r\n            }}\r\n        >\r\n            <fieldset className=\"text-center\">\r\n                <legend>Agrega un campo</legend>\r\n            </fieldset>\r\n\r\n            <div className=\"row mt-4\">\r\n                <div className=\"col-md-4 mt-2\">\r\n                    <select \r\n                        className=\"form-control\"\r\n                        name=\"tipo\"\r\n                        onChange={obtenerCampos}\r\n                    >\r\n                        <option value=\"\">-- Selecciona un tipo de campo --</option>\r\n                        {campos.map(campo => (\r\n                            <option \r\n                                key={campo.id} \r\n                                value={campo.nombre} \r\n                            >{campo.nombre}</option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div className=\"col-md-4 mt-2\">\r\n                    <input\r\n                        name=\"label\"\r\n                        className=\"form-control\"\r\n                        type=\"text\"\r\n                        placeholder=\"Etiqueta del campo\"\r\n                        onChange={obtenerCampos}\r\n                    />\r\n                </div>\r\n\r\n                {\r\n                    camposGenerados.tipo != 'text' && camposGenerados.tipo != ''? \r\n                    <div className=\"col-md-4 mt-2\">\r\n                        <input\r\n                            name=\"cantidad\"\r\n                            className=\"form-control\"\r\n                            type=\"number\"\r\n                            placeholder=\"Cantidad de opciones\"\r\n                            onChange={obtenerCampos}\r\n                        />\r\n                    </div>\r\n                    :\r\n                    null\r\n                }\r\n                \r\n                {\r\n                    listarOpciones()\r\n                }\r\n\r\n\r\n                <div className=\"col-md-4 mt-2\">\r\n                    <input\r\n                        type=\"submit\"\r\n                        className=\"btn btn-block btn-primary\"\r\n                        value=\"Agregar campo\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default ListaCampos;","import React from 'react';\r\n\r\nconst InputText = ({config}) => {\r\n    return ( \r\n            <div className=\"col-md-4 mt-2\">\r\n                <input\r\n                    name={config.name}\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    placeholder={config.label}\r\n                />\r\n            </div>\r\n     );\r\n}\r\n \r\nexport default InputText;","import React from 'react';\r\n\r\nconst InputSelect = ({config}) => {\r\n    return ( \r\n        <div className=\"col-md-4 mt-2\">\r\n            <select \r\n                className=\"form-control\"\r\n                name={config.name}\r\n            >\r\n                <option value=\"\">-- Selecciona un valor --</option>\r\n                {config.opciones.map((opcion, key) => (\r\n                    <option \r\n                        key={`opcion${key}`} \r\n                        value={opcion} \r\n                    >{opcion}</option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default InputSelect;","import React, { useContext, useState } from 'react';\r\nimport { FormularioContext } from '../context/FormularioContext';\r\nimport InputText from './InputText'\r\nimport InputSelect from './InputSelect'\r\n\r\nconst Formulario = () => {\r\n\r\n\r\n    const { formulario } = useContext(FormularioContext);\r\n\r\n    const tipoInput = (item)=>{\r\n        if(item.tipo == \"text\"){\r\n            return <InputText key={item.name}  config = {item} />\r\n        }else if(item.tipo == \"select\"){\r\n            return <InputSelect key={item.name}  config = {item}/>\r\n        }\r\n    }\r\n\r\n    return ( \r\n        <form\r\n            className=\"col-12\"\r\n        >\r\n            <fieldset className=\"text-center\">\r\n                <legend>Formulario generado</legend>\r\n            </fieldset>\r\n\r\n            <div className=\"row mt-4\">\r\n                {\r\n                    formulario.map(item =>(\r\n                        \r\n                        tipoInput(item)\r\n                    ))\r\n                }\r\n            </div>\r\n        </form>\r\n     );\r\n}\r\n \r\nexport default Formulario;","import React from 'react';\nimport Header from './components/Header';\nimport ListaCampos from './components/ListaCampos';\nimport Formulario from './components/Formulario';\nimport CamposProvider from './context/CamposContext';\nimport FormularioProvider from './context/FormularioContext';\n\nfunction App() {\n  return (\n    <FormularioProvider>\n      <CamposProvider>\n        <Header/>\n        <ListaCampos/>\n        <Formulario/>\n      </CamposProvider>s\n    </FormularioProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}